<?php

namespace App\Tests\Controller;

use App\Tests\Authenticate;
use App\Tests\Entity\RegisterExpense;
use App\Utils\Enums\GeneralTypes;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * @package App\Tests\Controller
 */
class ExpenseControllerTest extends WebTestCase
{
    use Authenticate, RegisterExpense;

    /**
     * @var \Symfony\Bundle\FrameworkBundle\KernelBrowser
     */
    private $client;

    const EXPENSE_ROUTE = '/api/v1/expenses';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->client = static::createClient();
    }

    public function testDescriptionAsTheSameFromTheLastOneShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description" => "shop"], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(201);

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description" => "shop"], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(405);

        $this->assertJsonStringEqualsJsonString('{
                                                      "status": "error",
                                                      "message": "Duplication detected!You can\'t registered another expense with the same description from the last one."
                                                    }', $this->client->getResponse()->getContent());
    }

    public function testRegisterWithoutLoginShouldFail()
    {
        $this->client->request('POST', self::EXPENSE_ROUTE, ["description" => "shop"]);
        $this->assertResponseStatusCodeSame(401);
        $this->assertJson($this->client->getResponse()->getContent());
    }

    public function testRegisterDescriptionGreaterThan255ShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, [
            "description"=>"shopasdflkajsldf aslf jskldfjlks adjfkl sajdflasjdflkjsaldfjas ldkjflasd jflasdjfl asdjfasdshopasdflkajsldf aslf jskldfjlks adjfkl sajdflasjdflkjsaldfjas ldkjflasd jflasdjfl asdjfasdshopasdflkajsldf aslf jskldfjlks adjfkl sajdflasjdflkjsaldfjas ldkjflasd jflasdjfl asdjfasdshopasdflkajsldf aslf jskldfjlks adjfkl sajdflasjdflkjsaldfjas ldkjflasd jflasdjfl asdjfasd"
        ],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "description": "Description cannot be longer than 70 characters"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterDescriptionBlankShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>""],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "description": "A description is required!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterDueDateInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "due_date" => "valid"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "due_date": "Due date invalid, should be in format Y-m-d"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterPaidAtInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "paid_at" => "valid"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "paid_at": "Paid at invalid, should be in format Y-m-d H:i:s"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterTotalInstallmentsNotIntegerShouldBeIgnored()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "total_installments" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(201);

        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertEquals(1, $res["data"][0]["total_installments"]);
    }

    public function testRegisterTotalInstallments201ShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "payment_type"=>"credit_card", "total_installments" => 201],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "total_installments": "This value should be between 1 and 200."
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterTotalInstallmentsDecimalShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "payment_type"=>"credit_card", "total_installments" => 2.1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "total_installments": "Total of Installments must be an integer!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterTotalInstallmentsEqualZeroShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "payment_type"=>"credit_card", "total_installments" => 0],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "total_installments": "Total of Installments must be an integer greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterInstallmentNumberEqualZeroShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "installment_number" => 0],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "installment_number": "Installment Number must be an integer greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterInstallmentNumberNotIntegerShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "installment_number" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "installment_number": "Installment Number must be an integer!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterInstallmentNumberDecimalShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "installment_number" => 1.2],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "installment_number": "Installment Number must be an integer!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterPaymentTypeInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "payment_type" => "seen"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "payment_type": "Payment Type Invalid!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterValueStringShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "value" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "value": "Value must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterValueNegativeShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "value" => -1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "value": "Value must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterAmountPaidStringShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "amount_paid" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "amount_paid": "Amount paid must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterAmountPaidNegativeShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->client->request('POST', self::EXPENSE_ROUTE, ["description"=>"shops", "amount_paid" => -1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "amount_paid": "Amount Paid must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testRegisterWithAnotherStatusShouldSetSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "status" => "paid"], $result["token"]);

        $this->assertEquals("paid", $expense[0]["status"]);
    }

    public function testRegisterWithDescriptionValidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->assertEquals("shops", $expense[0]["description"]);
    }

    public function testRegisterWithDueDateValidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "due_date"=>"2019-01-01"], $result["token"]);
        $this->assertEquals("2019-01-01", $expense[0]["due_date"]);
    }

    public function testRegisterWithPaidAtValidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "paid_at"=>"2019-01-01 12:00:00"], $result["token"]);
        $this->assertEquals("2019-01-01 12:00:00", $expense[0]["paid_at"]);
    }

    public function testRegisterWithValueValidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "value"=>299.00], $result["token"]);
        $this->assertEquals(299.00, $expense[0]["value"]);
    }

    public function testRegisterWithAmountPaidValidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "amount_paid"=>1009.10], $result["token"]);
        $this->assertEquals(1009.1, $expense[0]["amount_paid"]);
    }

    public function testRegisterWithTotalInstallments3WithoutDueDateAndValueSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE,
        [
            "description" => "shops",
            "total_installments" => 3
        ], $result["token"]);

        $this->assertEquals(1, $expense[0]["installment_number"]);
        $this->assertEquals("cash", $expense[0]["payment_type"]);
        $this->assertEquals("shops", $expense[0]["description"]);
        $this->assertEquals("pending", $expense[0]["status"]);
        $this->assertNull($expense[0]["token_installment_group"]);
        $this->assertEquals(1, $expense[0]["total_installments"]);
        $this->assertNull($expense[0]["value"]);
        $this->assertNull($expense[0]["amount_paid"]);
        $this->assertEmpty($expense[0]["due_date"]);
    }

    public function testRegisterWithTotalInstallments3AndValue3000WithoutDueDateSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "total_installments"=>3, "value"=>3000], $result["token"]);
        $this->assertEquals(1, $expense[0]["installment_number"]);
        $this->assertEquals(1, $expense[0]["total_installments"]);
        $this->assertNull($expense[0]["token_installment_group"]);
        $this->assertEquals(3000,$expense[0]["value"]);
        $this->assertNull($expense[0]["amount_paid"]);
        $this->assertEmpty($expense[0]["due_date"]);
    }

    public function testRegisterWithTotalInstallments3AndValue3000AndDueDateSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops", "total_installments"=>3, "value"=>3000, "due_date"=>"2019-01-01"], $result["token"]);

        $this->assertEquals(1, $expense[0]["installment_number"]);
        $this->assertEquals(1, $expense[0]["total_installments"]);
        $this->assertNull($expense[0]["token_installment_group"]);
        $this->assertEquals(3000,$expense[0]["value"]);
        $this->assertNull($expense[0]["amount_paid"]);
        $this->assertEquals("2019-01-01", $expense[0]["due_date"]);
    }

    public function testRegisterWithTotalInstallments5AndValue3000AndDueDateSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $params = ["description"=>"shops", "payment_type"=>"credit_card","total_installments"=>5, "value"=>3000, "due_date"=>"2019-01-01"];

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, $params, $result["token"]);

        $this->assertEquals(1, $expense[0]["installment_number"]);
        $this->assertEquals(2, $expense[1]["installment_number"]);
        $this->assertEquals(3, $expense[2]["installment_number"]);
        $this->assertEquals(4, $expense[3]["installment_number"]);
        $this->assertEquals(5, $expense[4]["installment_number"]);

        $this->assertEquals(5, $expense[0]["total_installments"]);
        $this->assertEquals(5, $expense[1]["total_installments"]);
        $this->assertEquals(5, $expense[2]["total_installments"]);
        $this->assertEquals(5, $expense[3]["total_installments"]);
        $this->assertEquals(5, $expense[4]["total_installments"]);

        $this->assertEquals($expense[0]["token_installment_group"], $expense[1]["token_installment_group"]);
        $this->assertEquals($expense[0]["token_installment_group"], $expense[2]["token_installment_group"]);
        $this->assertEquals($expense[0]["token_installment_group"], $expense[3]["token_installment_group"]);
        $this->assertEquals($expense[0]["token_installment_group"], $expense[4]["token_installment_group"]);

        $this->assertEquals(600,$expense[0]["value"]);
        $this->assertEquals(600,$expense[1]["value"]);
        $this->assertEquals(600,$expense[2]["value"]);
        $this->assertEquals(600,$expense[3]["value"]);
        $this->assertEquals(600,$expense[4]["value"]);

        $this->assertNull($expense[0]["amount_paid"]);
        $this->assertNull($expense[1]["amount_paid"]);
        $this->assertNull($expense[2]["amount_paid"]);
        $this->assertNull($expense[3]["amount_paid"]);
        $this->assertNull($expense[4]["amount_paid"]);

        $this->assertEquals("2019-01-01", $expense[0]["due_date"]);
        $this->assertEquals("2019-02-01", $expense[1]["due_date"]);
        $this->assertEquals("2019-03-01", $expense[2]["due_date"]);
        $this->assertEquals("2019-04-01", $expense[3]["due_date"]);
        $this->assertEquals("2019-05-01", $expense[4]["due_date"]);
    }

    public function testUpdateChangeDescriptionGreaterThan255ShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], [
            "description"=>"shopasdflkajsldf aslf jskldfjlks adjfkl sajdflasjdflkjsaldfjas ldkjflasd jflasdjfl asdjfasdshopasdflkajsldf aslf jskldfjlks adjfkl"
        ],[], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "description": "Description cannot be longer than 70 characters"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateDescriptionAsTheSameFromTheLastOneSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);

        $expenseTwo = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shop"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expenseTwo[0]["id"], ["description"=>"shops"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateWithoutLoginShouldFail()
    {
        $this->client->request('PUT', self::EXPENSE_ROUTE."/f41fd8d1-0d21-4b45-9f16-cb101c72755b", ["description" => "shop"]);
        $this->assertResponseStatusCodeSame(401);
        $this->assertJson($this->client->getResponse()->getContent());
    }

    public function testUpdateWithUnregisteredUUIDShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/f41fd8d1-0d21-4b45-9f16-cb101c72755b", ["description"=>""],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(404);

        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "error",
                                                                  "message":"There is no expense with this f41fd8d1-0d21-4b45-9f16-cb101c72755b"
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateDescriptionBlankShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["description"=>""],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "description": "A description is required!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateDueDateInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["due_date" => "valid"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "due_date": "Due date invalid, should be in format Y-m-d"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdatePaidAtInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["paid_at" => "valid"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "paid_at": "Paid at invalid, should be in format Y-m-d H:i:s"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateTotalInstallmentsShouldBeIgnoredSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["total_installments" => 3],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);

        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertCount(1, $res["data"]);
        $this->assertEquals($expense[0]["id"], $res["data"][0]["id"]);
        $this->assertEquals(1, $res["data"][0]["total_installments"]);
    }

    public function testUpdateInstallmentsShouldBeIgnoredSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["installment_number" => 3],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);

        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertCount(1, $res["data"]);
        $this->assertEquals($expense[0]["id"], $res["data"][0]["id"]);
        $this->assertEquals(1, $res["data"][0]["installment_number"]);
    }

    public function testUpdatePaymentTypeInvalidShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "seen"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "payment_type": "Payment Type Invalid!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateValueStringShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["value" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "value": "Value must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateValueNegativeShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["value" => -1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "value": "Value must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateAmountPaidStringShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], [ "amount_paid" => "a"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "amount_paid": "Amount paid must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateAmountPaidNegativeShouldFail()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], [ "amount_paid" => -1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(422);
        $this->assertJsonStringEqualsJsonString('{
                                                                  "status": "fail",
                                                                  "data": {
                                                                    "amount_paid": "Amount Paid must be a decimal equal or greater than zero!"
                                                                  }
                                                                }', $this->client->getResponse()->getContent());
    }

    public function testUpdateChangeDescriptionSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["description"=>"center"],[], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateDueDateSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["due_date" => "2018-01-01"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdatePaidAtSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["paid_at" => "2020-02-02 12:00:00"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateTotalInstallments()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["total_installments" => 2],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateInstallmentNumberSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["installment_number" => 1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdatePaymentTypeSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "credit"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateValueSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["value" => 100],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdateAmountPaidSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description"=>"shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], [ "amount_paid" => 1],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);
    }

    public function testUpdatePaymentTypeCashForOtherSuccess()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "credit_card"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertEquals('credit_card', $res["data"][0]["payment_type"]);
        $this->assertNull($res["data"][0]["token_installment_group"]);
    }

    public function testTryIncreaseTotalInstallmentsFromTypeCashShouldBeIgnored()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["total_installments" => 3],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE."/".$expense[0]["id"], [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertEquals(1, $res["data"]["total_installments"]);
    }

    public function testChangeCashToAnotherTypeShouldFillTokenGroup()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops"], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => GeneralTypes::STATUS_PAYMENT_CREDIT_CARD],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertNull($res["data"][0]["token_installment_group"]);
    }

    public function testChangeOtherTypeToCashTypeShouldFillTokenGroupWithNull()
    {
        $result = $this->getTokenAuthenticate();

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, ["description" => "shops", "payment_type"=>GeneralTypes::STATUS_PAYMENT_CREDIT_CARD], $result["token"]);
        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "cash"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertNull($res["data"][0]["token_installment_group"]);
    }

    public function testChangeOtherTypeToCashShouldMultiplyInstallmentsAndSetTotal()
    {
        $result = $this->getTokenAuthenticate();
        $params = [
            "description" => "shops",
            "total_installments" => 3,
            "payment_type"=>GeneralTypes::STATUS_PAYMENT_CREDIT_CARD,
            "value" => 3000
        ];

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, $params, $result["token"]);

        $this->assertCount(3, $expense);
        $this->assertEquals(1000, $expense[0]["value"]);
        $this->assertEquals(1000, $expense[1]["value"]);
        $this->assertEquals(1000, $expense[2]["value"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "cash"],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertCount(1, $res["data"]);
        $this->assertNull($res["data"][0]["token_installment_group"]);
        $this->assertEquals(3000, $res["data"][0]["value"]);
    }

    public function testChangeCashToAnotherWithMoreThanOneInstallmentShouldDivide()
    {
        $result = $this->getTokenAuthenticate();
        $params = [
            "description" => "shops",
            "payment_type" => GeneralTypes::STATUS_PAYMENT_CASH,
            "value" => 3000
        ];

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, $params, $result["token"]);

        $this->assertCount(1, $expense);
        $this->assertEquals(3000, $expense[0]["value"]);

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], ["payment_type" => "credit_card", "total_installments"=>3],[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertCount(3, $res["data"]);
        $this->assertEquals(1000, $res["data"][0]["value"]);
        $this->assertEquals(1000, $res["data"][1]["value"]);
        $this->assertEquals(1000, $res["data"][2]["value"]);
    }

    public function testChangeCreditCardToBoletoShouldStayTheSameOnlyWithTypeDiff()
    {
        $result = $this->getTokenAuthenticate();
        $params = [
            "description" => "shops",
            "payment_type" => GeneralTypes::STATUS_PAYMENT_CREDIT_CARD,
            "total_installments" => 3,
            "value" => 3000
        ];

        $expense = $this->registerExpense(self::EXPENSE_ROUTE, $params, $result["token"]);

        $this->assertCount(3, $expense);
        $this->assertEquals(1000, $expense[0]["value"]);
        $this->assertEquals(1000, $expense[1]["value"]);
        $this->assertEquals(1000, $expense[2]["value"]);
        $this->assertEquals(GeneralTypes::STATUS_PAYMENT_CREDIT_CARD, $expense[0]["payment_type"]);

        $params = [
            "payment_type" => GeneralTypes::STATUS_PAYMENT_BOLETO,
        ];

        $this->client->request('PUT', self::EXPENSE_ROUTE."/".$expense[0]["id"], $params,[], ["HTTP_Authorization" => $result["token"]]);

        $this->assertResponseStatusCodeSame(204);

        $this->client->request('GET', self::EXPENSE_ROUTE, [], [], ["HTTP_Authorization" => $result["token"]]);
        $this->assertResponseStatusCodeSame(200);
        $res = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertCount(3, $res["data"]);
        $this->assertEquals(GeneralTypes::STATUS_PAYMENT_BOLETO, $res["data"][0]["payment_type"]);
        $this->assertEquals(1000, $res["data"][0]["value"]);
        $this->assertEquals(1000, $res["data"][1]["value"]);
        $this->assertEquals(1000, $res["data"][2]["value"]);
    }
}